# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
print(nchar(lyric))
fruits <- substr(lyric, 15, 32)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruit_e <- gsub(fruits, "a", "e")
'?gsub'
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruit_e <- gsub(fruits, "a", "ee")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruit_e <- gsub(fruits, "ee", "a")
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-2/exercise.R', echo=TRUE)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- cat(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- (intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- (intro + fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- (intro, + fruits_e)
lyric_e <- add(intro, fruits_e)
lyric_e <- sum(intro, fruits_e)
lyric_e <- cat(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- cat(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_thee(7)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
total_inches <- feet/12 + inches
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches){
total_inches <- feet/12 + inches
metric <-
}
imperial_to_metric <- function(feet, inches){
total_inches <- feet/12 + inches
metric <- total-inches * .0254
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 5)
imperial_to_metric <- function(feet, inches){
total_inches <- feet/12 + inches
metric <- total_inches * .0254
return (metric)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 5)
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
imperial_to_metric <- function(feet, inches){
total_inches <- feet/12 + inches
metric <- total_inches/ 39.3701
return (metric)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 5)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 5)
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R', echo=TRUE)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c(Osvaldo, Sarah , Natasha)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Osvaldo", "Sarah" , "Natasha")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Osvaldo", "Sarah" , "Natasha")
# Use the colon operator : to create a vector `n` of numbers from 10:49
num <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(num)
# Add 1 to each element in `n` and print the result
print(num+ 1)
# Add 1 to each element in `n` and print the result
num <- num +1
print(num)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n- m
source('C:/Users/bubba/Desktop/book-exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
source('C:/Users/bubba/Desktop/book-exercises/chapter-07-exercises/exercise-1/exercise.R', echo=TRUE)
# Subtract `m` FROM `n`. Note the recycling!
n- m
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave*cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
print(names)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
