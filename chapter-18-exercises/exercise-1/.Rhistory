1+1
3+7
#MY first program
print("Hello world!")
#MY first program
print("Hello world!")
my_num <- 201
my_num+7
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Mount Vernon"
# Assign your name to the variable `my_name`
my_name <- "Osvaldo Mendez"
# Assign your height (in inches) to a variable `my_height`
my_height <- "65"
# Assign your height (in inches) to a variable `my_height`
my_height <- 65
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 600
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- TRUE if total_cost > 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- TRUE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1
source('C:/Users/bubba/Desktop/book-exercises/chapter-05-exercises/exercise-1/exercise.R')
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost>1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- total_cost/1000L
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- total_cost/1000 R
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1
# Create, a variable `my_name` that contains your name
my_name <- "Osvaldo Mendez"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print <- name_length
# Print the number of letters in your name
print(name_length)
source('C:/Users/bubba/Desktop/book-exercises/chapter-06-exercises/exercise-1/exercise.R')
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name + "is programming!")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name , "is programming!")
source('C:/Users/bubba/Desktop/a2-core-skills-19Omendez/assignment.R', echo=TRUE)
library("stringr")
source('C:/Users/bubba/Desktop/a2-core-skills-19Omendez/assignment.R', echo=TRUE)
date_has_passed <- function(date){
current_date <- Sys.Date()
if(date - current_date > 0 ){
return(TRUE)
}else{
return(FALSE)
}
}
deadline <- date_has_passed(as.Date("2020-01-23"))
#part 4.7, this function takes a date as an argument and then proceeds to check if the given date has passed
date_has_passed <- function(date){
current_date <- Sys.Date()
if(date - current_date > 0 ){
return(FALSE)
}else{
return(TRUE)
}
}
deadline <- date_has_passed(as.Date("2020-01-23"))
print(deadline)
birthdays <- list(mom = as.Date("1980-08-24"), dad = as.Date("1979-12-21"), gabe = as.Date("1996-11-09"), josh = as.Date("2006-01-25"), janixan = as.Date("2009-10-15"), me = as.Date("2000-09-17"))
print(birthdays)
spring_break <- as.Date("2020-03-21") #part 4.1, set variable that contains first day of spring break
class(spring_break) #part 4.2 , check variable type
today <- Sys.Date() #part 4.3, set variable today to be current date when program is run
days_to_break <- spring_break - today #part 4.4, create a variable to calculate days until break
print(days_to_break)
#part 4.5, this function takes a date and a year as an argument and then proceeds to change the year in the date with the one given as an argument
change_year <- function(date, year){
date_as_string <- as.character(date)
new_date <- as.Date(paste0(year, substr(date_as_string, 5, nchar(date_as_string))))
return (new_date)
}
spring_break_2025 <- change_year(spring_break, 2025) #part 4.6, testing out if the function I made works
print(spring_break_2025)
class(spring_break_2025)
#part 4.7, this function takes a date as an argument and then proceeds to check if the given date has passed
date_has_passed <- function(date){
current_date <- Sys.Date()
if(date - current_date > 0 ){
return(FALSE)
}else{
return(TRUE)
}
}
get_next_birthday <- function(birthday_day){
next_birthday <- change_year(birthday_day, 2020)
passed <- date_has_passed(next_birthday)
if(passed == TRUE){
next_birthday <- change_year(next_birthday, 2021)
return(next_birthday)
}else{
return(next_birthday)
}
}
get_next_birthday(birthdays$me)
next_birthdays <- lapply(birthdays, get_next_birthday)
View(next_birthdays)
print(next_birthdays)
# load relevant libraries
library("httr")
library("jsonlite")
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
setwd("C:/Users/bubba/Desktop/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("api_key.r") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("api_key.R") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
setwd("C:/Users/bubba/Desktop/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey") #go to file, select all and run
source("apikey.R")
source("apikey.R")
source("apikey.R")
source("apikey.R")
source("apikey.R")
source("apikey.R")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
setwd("C:/Users/bubba/Desktop/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to file, select all and run
query_params <- list("api-key" = nyt_key)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- ""
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
# What kind of data structure did this produce? A data frame? A list?
data
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
data
